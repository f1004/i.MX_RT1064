/*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
【平    台】龙邱i.MX RT1052核心板-智能车板
【编    写】CHIUSIR
【E-mail  】chiusir@163.com
【软件版本】V1.0，龙邱开源代码，仅供参考，后果自负
【最后更新】2018年2月5日
【相关信息参考下列地址】
【网    站】http://www.lqist.cn
【淘宝店铺】http://shop36265907.taobao.com
------------------------------------------------
【dev.env.】IAR8.20.1及以上版本
【Target 】 i.MX RT1052
【Crystal】 24.000Mhz
【ARM PLL】 1200MHz
【SYS PLL】 528MHz
【USB PLL】 480MHz
================================================
北京龙邱智能科技：从 16MB QSPI FLASH启动，SDRAM为32MB字节
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/
define exported symbol m_boot_hdr_conf_start = 0x70000000;
define symbol m_boot_hdr_ivt_start           = 0x70001000;
define symbol m_boot_hdr_boot_data_start     = 0x70001020;
define symbol m_boot_hdr_dcd_data_start      = 0x70001030;

define symbol m_interrupts_start       = 0x70002000;
define symbol m_interrupts_end         = 0x700023FF;

define symbol m_text_start             = 0x70002400;
define symbol m_text_end               = 0x70FFFFFF;

//DTCROM
define symbol m_data_start             = 0x20000000;
define symbol m_data_end               = 0x2001FFFF;

//RAM_interrupts
define symbol ram_interrupts_start     = 0x00000000;
define symbol ram_interrupts_end       = 0x000003FF;

//ITCRAM
define symbol m_data1_start            = 0x00000400;
define symbol m_data1_end              = 0x0001FFFF;

//OTCRAM
define symbol m_data2_start            = 0x20200000;
define symbol m_data2_end              = 0x202BFFFF;



/* Sizes */
if (isdefinedsymbol(__stack_size__)) {
  define symbol __size_cstack__        = __stack_size__;
} else {
  define symbol __size_cstack__        = 0x8000;
}

if (isdefinedsymbol(__heap_size__)) {
  define symbol __size_heap__          = __heap_size__;
} else {
  define symbol __size_heap__          = 0x4000;
}

define exported symbol __VECTOR_TABLE  = m_interrupts_start;
define exported symbol __VECTOR_RAM    = m_interrupts_start;
define exported symbol __RAM_VECTOR_TABLE_SIZE = 0x0;

define memory mem with size = 4G;
define region TEXT_region = mem:[from m_interrupts_start to m_interrupts_end]
                          | mem:[from m_text_start to m_text_end];


define region DATA1_region = mem:[from m_data1_start to m_data1_end];
define region DATA2_region = mem:[from m_data2_start to m_data2_end];
define region NCACHE_region = mem:[from m_data_start to m_data_end-__size_cstack__ - __size_heap__];
define region CSTACK_region = mem:[from m_data_end-__size_cstack__+1 to m_data_end];
define region HEAP_region = mem:[from m_data_end - __size_cstack__-__size_heap__+1 to from m_data_end - __size_cstack__];

define block CSTACK    with alignment = 8, size = __size_cstack__   { };
define block HEAP      with alignment = 8, size = __size_heap__     { };
define block RW        { first readwrite, section m_usb_dma_init_data };
define block ZI         with alignment = 32  { first zi, section m_usb_dma_noninit_data };
define block NCACHE_VAR { section NonCacheable , section NonCacheable.init };


initialize by copy { readwrite, readonly, section .textrw }

	 except{                                                                                            //排除不希望从RAM运行的代码和数据

                section .intvec,       /* Don’t copy interrupt table */

                section .init_array,      /* Don’t copy C++ init table */

                readonly section .boot_hdr.conf,             //防止XIP启动配置也被放在RAM区域

                readonly section .boot_hdr.ivt,

                readonly section .boot_hdr.boot_data,

                readonly section .boot_hdr.dcd_data,

            };

do not initialize  { section .noinit };

place at address mem: m_interrupts_start    { readonly section .intvec };
place at address mem: ram_interrupts_start  { section .intvec_RAM };

place at address mem:m_boot_hdr_conf_start { section .boot_hdr.conf };
place at address mem:m_boot_hdr_ivt_start { section .boot_hdr.ivt };
place at address mem:m_boot_hdr_boot_data_start { readonly section .boot_hdr.boot_data };
place at address mem:m_boot_hdr_dcd_data_start { readonly section .boot_hdr.dcd_data };

keep{ section .boot_hdr.conf, section .boot_hdr.ivt, section .boot_hdr.boot_data, section .boot_hdr.dcd_data };

//程序储存位置
place in TEXT_region                        { readonly };

//已初始化全局变量存放区域
place in DATA1_region                       { block RW };

//未初始化全局变量存放区域
place in DATA2_region                       { block ZI };

//堆区域 malloc申请内存时使用
place in HEAP_region                        { last block HEAP };

//栈区域 
place in CSTACK_region                      { block CSTACK };

//NCACHE 区域
place in NCACHE_region                      { block NCACHE_VAR };

